<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'League\OAuth2\Server\AuthorizationServer' shared service.

include_once \dirname(__DIR__, 4).'/vendor/league/event/src/EmitterAwareInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/league/event/src/EmitterAwareTrait.php';
include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/AuthorizationServer.php';
include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Repositories/RepositoryInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Repositories/ClientRepositoryInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/trikoder/oauth2-bundle/League/Repository/ClientRepository.php';
include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Repositories/ScopeRepositoryInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/trikoder/oauth2-bundle/League/Repository/ScopeRepository.php';
include_once \dirname(__DIR__, 4).'/vendor/trikoder/oauth2-bundle/Manager/ScopeManagerInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/trikoder/oauth2-bundle/Manager/InMemory/ScopeManager.php';
include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/CryptKey.php';
include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Grant/GrantTypeInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/CryptTrait.php';
include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Grant/AbstractGrant.php';
include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Grant/ClientCredentialsGrant.php';
include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Grant/PasswordGrant.php';
include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Repositories/UserRepositoryInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/trikoder/oauth2-bundle/League/Repository/UserRepository.php';
include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Repositories/RefreshTokenRepositoryInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/trikoder/oauth2-bundle/League/Repository/RefreshTokenRepository.php';
include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Grant/RefreshTokenGrant.php';
include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Grant/AbstractAuthorizeGrant.php';
include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Grant/AuthCodeGrant.php';
include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Repositories/AuthCodeRepositoryInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/trikoder/oauth2-bundle/League/Repository/AuthCodeRepository.php';
include_once \dirname(__DIR__, 4).'/vendor/trikoder/oauth2-bundle/Manager/AuthorizationCodeManagerInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/trikoder/oauth2-bundle/Manager/Doctrine/AuthorizationCodeManager.php';
include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Grant/ImplicitGrant.php';
include_once \dirname(__DIR__, 4).'/vendor/trikoder/oauth2-bundle/Converter/ScopeConverterInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/trikoder/oauth2-bundle/Converter/ScopeConverter.php';
include_once \dirname(__DIR__, 4).'/vendor/trikoder/oauth2-bundle/Converter/UserConverterInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/trikoder/oauth2-bundle/Converter/UserConverter.php';

$a = ($this->privates['Trikoder\\Bundle\\OAuth2Bundle\\Manager\\Doctrine\\ClientManager'] ?? $this->load('getClientManagerService.php'));
$b = ($this->privates['Trikoder\\Bundle\\OAuth2Bundle\\Converter\\ScopeConverter'] ?? ($this->privates['Trikoder\\Bundle\\OAuth2Bundle\\Converter\\ScopeConverter'] = new \Trikoder\Bundle\OAuth2Bundle\Converter\ScopeConverter()));
$c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

$this->privates['League\\OAuth2\\Server\\AuthorizationServer'] = $instance = new \League\OAuth2\Server\AuthorizationServer(new \Trikoder\Bundle\OAuth2Bundle\League\Repository\ClientRepository($a), ($this->privates['Trikoder\\Bundle\\OAuth2Bundle\\League\\Repository\\AccessTokenRepository'] ?? $this->load('getAccessTokenRepositoryService.php')), new \Trikoder\Bundle\OAuth2Bundle\League\Repository\ScopeRepository(new \Trikoder\Bundle\OAuth2Bundle\Manager\InMemory\ScopeManager(), $a, $b, $c), new \League\OAuth2\Server\CryptKey((\dirname(__DIR__, 4).'/etc/oAuth2/key/private.key'), NULL, false), $this->getEnv('resolve:OAUTH_ENCRIPTION_KEY'));

$d = new \Trikoder\Bundle\OAuth2Bundle\League\Repository\RefreshTokenRepository(($this->privates['Trikoder\\Bundle\\OAuth2Bundle\\Manager\\Doctrine\\RefreshTokenManager'] ?? $this->load('getRefreshTokenManagerService.php')), ($this->privates['Trikoder\\Bundle\\OAuth2Bundle\\Manager\\Doctrine\\AccessTokenManager'] ?? $this->load('getAccessTokenManagerService.php')));

$e = new \League\OAuth2\Server\Grant\PasswordGrant(new \Trikoder\Bundle\OAuth2Bundle\League\Repository\UserRepository($a, $c, ($this->privates['Trikoder\\Bundle\\OAuth2Bundle\\Converter\\UserConverter'] ?? ($this->privates['Trikoder\\Bundle\\OAuth2Bundle\\Converter\\UserConverter'] = new \Trikoder\Bundle\OAuth2Bundle\Converter\UserConverter()))), $d);
$e->setRefreshTokenTTL(new \DateInterval('P1M'));
$f = new \League\OAuth2\Server\Grant\RefreshTokenGrant($d);
$f->setRefreshTokenTTL(new \DateInterval('P1M'));
$g = new \League\OAuth2\Server\Grant\AuthCodeGrant(new \Trikoder\Bundle\OAuth2Bundle\League\Repository\AuthCodeRepository(new \Trikoder\Bundle\OAuth2Bundle\Manager\Doctrine\AuthorizationCodeManager(($this->services['doctrine.orm.default_entity_manager'] ?? $this->getDoctrine_Orm_DefaultEntityManagerService())), $a, $b), $d, new \DateInterval('PT10M'));
$g->setRefreshTokenTTL(new \DateInterval('P1M'));

$instance->enableGrantType(new \League\OAuth2\Server\Grant\ClientCredentialsGrant(), new \DateInterval('P1M'));
$instance->enableGrantType($e, new \DateInterval('P1M'));
$instance->enableGrantType($f, new \DateInterval('P1M'));
$instance->enableGrantType($g, new \DateInterval('P1M'));
$instance->enableGrantType(new \League\OAuth2\Server\Grant\ImplicitGrant(new \DateInterval('P1M')), new \DateInterval('P1M'));

return $instance;
